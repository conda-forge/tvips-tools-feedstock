--- tvips/CMakeLists.txt.orig
+++ tvips/CMakeLists.txt
@@ -210,10 +210,10 @@ add_custom_target(_update_config_h
 
 # On macOS _DARWIN_C_SOURCE is required to expose non-POSIX
 # extensions, such as getprogname(3) and setprogname(3).  On Linux
-# _BSD_SOURCE and _XOPEN_SOURCE >= 600 are needed for for
+# _DEFAULT_SOURCE and _XOPEN_SOURCE >= 600 are needed for for
 # strncasecmp(3) and strtof(3), respectively.
-add_definitions(-D_BSD_SOURCE)
 add_definitions(-D_DARWIN_C_SOURCE)
+add_definitions(-D_DEFAULT_SOURCE)
 add_definitions(-D_XOPEN_SOURCE=600)
 
 
--- tvips/adoc.l.orig
+++ tvips/adoc.l
@@ -31,7 +31,7 @@
 %{
 
 #include <ctype.h>
-#include <string.h>
+#include <strings.h>
 #include <time.h>
 
 #include "adoc.h"
--- tvips/dan_test.c.orig
+++ tvips/dan_test.c
@@ -101,7 +101,7 @@ main(int argc, char *argv[])
     }
     frame_free(bkg);
 
-    fprintf(stderr, "Average intensity %zd\n", sum / (frame->panel->width * frame->panel->height));
+    fprintf(stderr, "Average intensity %llu\n", (unsigned long long int)(sum / (frame->panel->width * frame->panel->height)));
 
 
     /* Write the output file.
--- tvips/fixpoint.c.orig
+++ tvips/fixpoint.c
@@ -400,8 +400,8 @@ programmatic2(const struct timespec *base, size_t nmemb)
                  */
 //                printf("%02zd: BREAKAGE UNDERSHOOT not in [%f, %f] %zd\n",
 //                       i, offset_min[i], offset_max[i], k_cur);
-                printf("%02zd: BREAKAGE UNDERSHOOT %ld not in [%f, %f] %zd\n",
-                       i, base[i].tv_sec, offset_min + k[i] * p_min, offset_max + k[i] * p_max, k_cur);
+                printf("%02zd: BREAKAGE UNDERSHOOT %lld not in [%f, %f] %zd\n",
+                       i, (long long int)base[i].tv_sec, offset_min + k[i] * p_min, offset_max + k[i] * p_max, k_cur);
                 for (j = i; j < nmemb; j++)
                     k[j] += 1;
                 ok = 0;
@@ -445,9 +445,9 @@ programmatic2(const struct timespec *base, size_t nmemb)
             offset_max = MIN(offset_max, o_max);
 
 
-            printf("\n    %02zd: CHECK %ld %ld %zd %f [%f]\n",
+            printf("\n    %02zd: CHECK %lld %lld %zd %f [%f]\n",
                    i,
-                   base[i].tv_sec, base[0].tv_sec, k[i], p_max, o_min);
+                   (long long int)base[i].tv_sec, (long long int)base[0].tv_sec, k[i], p_max, o_min);
 
             printf("    %02zd: LIMITS [%f, %f] [%f, %f] [%f, %f]\n",
                    i,
@@ -680,14 +680,14 @@ main(int argc, char *argv[])
     seq = calloc(N, sizeof(struct timespec));
     if (seq == NULL)
         err(EXIT_FAILURE, "Could not allocate sequence");
-    for (i = 0; i < N; i++) {
+    for (i = j = 0; i < N; i++) {
 //        if (1.0f * random() / RAND_MAX >= skip) {
 //        if (i != 2) { // This will undershoot
         if (i != 2 && i != 3 && i != 4) { // This will overshoot
             seq[j].tv_sec = lrintf(floorf(period * i + offset));
             seq[j].tv_nsec = 0;
 
-            printf(" ### %3zd: %ld\n", j, seq[j].tv_sec);
+            printf(" ### %3zd: %lld\n", j, (long long int)seq[j].tv_sec);
             j += 1;
         }
     }
--- tvips/img2px.c.orig
+++ tvips/img2px.c
@@ -1275,6 +1275,8 @@ _histogram(struct frame *frame, size_t counter, void *data)
         double stddev;
 
         mode = histogram->HHF + 1;
+        n_stddev = 0;
+        stddev = 0;
         for (i = histogram->HHF + 2; i < 2 * histogram->HHF; i++) {
             if (histogram->histogram[i] > histogram->histogram[mode]) {
                 mode = i;
--- tvips/metadata.h.orig
+++ tvips/metadata.h
@@ -40,6 +40,7 @@ METADATA_BEGIN_C_DECLS
 #include <stdint.h>
 
 #include <complex.h>
+#include <time.h>
 
 
 /* XXX Would be great if we could use some sort of opacity here...
--- tvips/tiff.c.orig
+++ tvips/tiff.c
@@ -33,6 +33,7 @@
 
 #include <stdlib.h>
 
+#include <ctype.h>
 #include <errno.h>
 #include TVIPS_TOOLS_ICONV_H
 #include <limits.h>
@@ -299,8 +300,8 @@ _tiff_raster(TIFF *tif, struct frame_panel *panel)
     void *p;
     tdata_t src_data;
     tsize_t src_size;
-    uint32 d, i, j, k, l, tl, tw, w;
-    uint16 bps, spp, sf, pm;
+    uint32_t d, i, j, k, l, tl, tw, w;
+    uint16_t bps, spp, sf, pm;
 
 
     /* Only grayscale images are supported.  Such images have a depth
@@ -886,9 +887,9 @@ tvips_readoutgeometry_tiff(const struct tvips_tiff *handle)
 int
 tvips_read_header(struct tvips_tiff *handle)
 {
-    uint32 *offset;
+    uint32_t *offset;
     uint32_t version;
-    uint16 count;
+    uint16_t count;
 
 
     /* Read the TemData structure using the new tag, which is provided
--- tvips/util.c.orig
+++ tvips/util.c
@@ -35,6 +35,7 @@
 #include <errno.h>
 #include <libgen.h>
 #include <string.h>
+#include <strings.h>
 
 #include "util.h"
 

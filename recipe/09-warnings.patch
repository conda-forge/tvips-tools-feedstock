--- tvips/adoc.l.orig
+++ tvips/adoc.l
@@ -414,6 +414,7 @@ adoc_parse(FILE *stream, const char *zone)
     if (adoclex_init_extra(&yylval, &scanner) != 0)
         return (NULL);
 
+    item = NULL;
     dict = root = metadata_item_new(NULL);
     if (dict == NULL)
         return (NULL);
--- tvips/dan_test.c.orig
+++ tvips/dan_test.c
@@ -101,7 +101,7 @@ main(int argc, char *argv[])
     }
     frame_free(bkg);
 
-    fprintf(stderr, "Average intensity %zd\n", sum / (frame->panel->width * frame->panel->height));
+    fprintf(stderr, "Average intensity %llu\n", (unsigned long long int)(sum / (frame->panel->width * frame->panel->height)));
 
 
     /* Write the output file.
--- tvips/fixpoint.c.orig
+++ tvips/fixpoint.c
@@ -400,8 +400,8 @@ programmatic2(const struct timespec *base, size_t nmemb)
                  */
 //                printf("%02zd: BREAKAGE UNDERSHOOT not in [%f, %f] %zd\n",
 //                       i, offset_min[i], offset_max[i], k_cur);
-                printf("%02zd: BREAKAGE UNDERSHOOT %ld not in [%f, %f] %zd\n",
-                       i, base[i].tv_sec, offset_min + k[i] * p_min, offset_max + k[i] * p_max, k_cur);
+                printf("%02zd: BREAKAGE UNDERSHOOT %lld not in [%f, %f] %zd\n",
+                       i, (long long int)base[i].tv_sec, offset_min + k[i] * p_min, offset_max + k[i] * p_max, k_cur);
                 for (j = i; j < nmemb; j++)
                     k[j] += 1;
                 ok = 0;
@@ -445,9 +445,9 @@ programmatic2(const struct timespec *base, size_t nmemb)
             offset_max = MIN(offset_max, o_max);
 
 
-            printf("\n    %02zd: CHECK %ld %ld %zd %f [%f]\n",
+            printf("\n    %02zd: CHECK %lld %lld %zd %f [%f]\n",
                    i,
-                   base[i].tv_sec, base[0].tv_sec, k[i], p_max, o_min);
+                   (long long int)base[i].tv_sec, (long long int)base[0].tv_sec, k[i], p_max, o_min);
 
             printf("    %02zd: LIMITS [%f, %f] [%f, %f] [%f, %f]\n",
                    i,
@@ -687,7 +687,7 @@ main(int argc, char *argv[])
             seq[j].tv_sec = lrintf(floorf(period * i + offset));
             seq[j].tv_nsec = 0;
 
-            printf(" ### %3zd: %ld\n", j, seq[j].tv_sec);
+            printf(" ### %3zd: %lld\n", j, (long long int)seq[j].tv_sec);
             j += 1;
         }
     }
--- tvips/img2px.c.orig
+++ tvips/img2px.c
@@ -1275,6 +1275,8 @@ _histogram(struct frame *frame, size_t counter, void *data)
         double stddev;
 
         mode = histogram->HHF + 1;
+        n_stddev = 0;
+        stddev = 0;
         for (i = histogram->HHF + 2; i < 2 * histogram->HHF; i++) {
             if (histogram->histogram[i] > histogram->histogram[mode]) {
                 mode = i;
--- tvips/mrc2smv.c.orig
+++ tvips/mrc2smv.c
@@ -246,9 +246,9 @@ mrc_readfile(
 
         if (nc * nr * ns * bps / 8 + LIBMAPIO_HEADER_SIZE != buf.st_size) {
             fclose(stream);
-            fprintf(stderr, "Size mismatch %lu != %zd\n",
+            fprintf(stderr, "Size mismatch %lu != %lld\n",
                     nc * nr * ns * bps / 8 + LIBMAPIO_HEADER_SIZE,
-                    buf.st_size);
+                    (long long int)buf.st_size);
             return (-1);
         }
 
--- tvips/tiff.c.orig
+++ tvips/tiff.c
@@ -41,6 +41,7 @@
 
 #include <stdlib.h>
 
+#include <ctype.h>
 #include <errno.h>
 #include TVIPS_TOOLS_ICONV_H
 #include <limits.h>
@@ -331,8 +332,8 @@ _tiff_raster(TIFF *tif, struct frame_panel *panel)
     void *p;
     tdata_t src_data;
     tsize_t src_size;
-    uint32 d, i, j, k, l, tl, tw, w;
-    uint16 bps, spp, sf, pm;
+    uint32_t d, i, j, k, l, tl, tw, w;
+    uint16_t bps, spp, sf, pm;
 
 
     /* Only grayscale images are supported.  Such images have a depth
@@ -899,8 +900,7 @@ tvips_readoutgeometry_tiff(const struct tvips_tiff *handle)
 int
 tvips_read_header(struct tvips_tiff *handle)
 {
-    uint32 offset;
-    uint32_t version;
+    uint32_t offset, version;
 
 
     /* Get a pointer to the TemData structure using the new tag, which
--- tvips/tvips.c.orig
+++ tvips/tvips.c
@@ -259,6 +259,7 @@ tvips_readfile(
         return (-1);
     }
 
+    lCounter = 0;
     while (!feof(stream)) {
         /* Read the image header.
          */

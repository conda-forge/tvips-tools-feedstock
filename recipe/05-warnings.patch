--- tvips/tiff.c.orig
+++ tvips/tiff.c
@@ -317,14 +317,14 @@ _tiff_write(thandle_t handle, tdata_t ptr, tsize_t size)
  * @return         Decoded raster, pass to free(3)
  */
 static uint16_t *
-_tiff_raster(TIFF *tif, uint32 *w, uint32 *l, uint16 *bps)
+_tiff_raster(TIFF *tif, uint32_t *w, uint32_t *l, uint16_t *bps)
 {
     uint16_t *raster;
     void *p;
     tdata_t src_data;
     tsize_t src_size;
-    uint32 d, i, j, k, tl, tw;
-    uint16 spp, sf, pm;
+    uint32_t d, i, j, k, tl, tw;
+    uint16_t spp, sf, pm;
 
     raster = NULL;
     src_data = NULL;
@@ -862,8 +862,7 @@ tvips_readoutgeometry_tiff(const struct tvips_tiff *handle)
 int
 tvips_read_header(struct tvips_tiff *handle)
 {
-    uint32 offset;
-    uint32_t version;
+    uint32_t offset, version;
 
 
     /* Get a pointer to the TemData structure using the new tag, which
@@ -896,8 +895,8 @@ tvips_read_tiff(struct tvips_tiff *handle, const char *zone)
 {
     uint32_t binning[2];
     struct frame *frame;
-    uint32 length, width;
-    uint16 bps;
+    uint32_t length, width;
+    uint16_t bps;
 
 
     /* Allocate and initialize the frame structure.
--- tvips/tiff2smv.c.orig
+++ tvips/tiff2smv.c
@@ -496,18 +496,19 @@
     for (i = 0; i < nmemb; i++) {
         stream = fopen(angle_tv_path[i].path, "rb");
         if (stream == NULL) {
+            warnx("Failed to open %s for reading", angle_tv_path[i].path);
             free(angle_tv_path);
             tvips_output_free(output);
-            err(EXIT_FAILURE,
-                "Failed to open %s for reading", angle_tv_path[i].path);
+            return (EXIT_FAILURE);
         }
 
         handle = tvips_open_tiff(stream);
         if (handle == NULL) {
+            warnx("Failed to read %s", angle_tv_path[i].path);
             fclose(stream);
             free(angle_tv_path);
             tvips_output_free(output);
-            err(EXIT_FAILURE, "Failed to read %s", angle_tv_path[i].path);
+            return (EXIT_FAILURE);
         }
 
 
@@ -546,22 +547,25 @@
         tvips_close_tiff(handle);
         fclose(stream);
         if (frame == NULL) {
+            warnx("Failed to read %s", angle_tv_path[i].path);
             free(angle_tv_path);
             tvips_output_free(output);
-            err(EXIT_FAILURE, "Failed to read %s", angle_tv_path[i].path);
+            return (EXIT_FAILURE);
         }
 
         if (param.flip != 0 && frame_flip(frame) != 0) {
+            warnx("Failed to flip %s", angle_tv_path[i].path);
             frame_free(frame);
             free(angle_tv_path);
             tvips_output_free(output);
-            err(EXIT_FAILURE, "Failed to flip %s", angle_tv_path[i].path);
+            return (EXIT_FAILURE);
         }
         if (frame_rot90(frame, param.k) != 0) {
+            warnx("Failed to rotate %s", angle_tv_path[i].path);
             frame_free(frame);
             free(angle_tv_path);
             tvips_output_free(output);
-            err(EXIT_FAILURE, "Failed to rotate %s", angle_tv_path[i].path);
+            return (EXIT_FAILURE);
         }
 
 
